from io import BytesIO
from typing import Any, Dict, Literal, List, Tuple

from PIL import Image as im

def open(
    fp: str | BytesIO,
    mode: Literal["r"] = "r",
    formats: List[str] | Tuple[str] | None = None,
) -> Image: ...

ColorType = str | int | Tuple[str, str, str] | Tuple[str, str, str, str] | None
SizeType = Tuple[int, int]

class Image:
    format = None
    format_description = None
    _close_exclusive_fp_after_loading = True
    def __init__(self): ...
    def __getattr__(self, name): ...
    @property
    def width(self): ...
    @property
    def height(self): ...
    @property
    def size(self): ...
    def _new(self, im): ...
    # Context manager support
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def close(self): ...
    def _copy(self): ...
    def _ensure_mutable(self): ...
    def _dump(self, file=None, format=None, **options): ...
    def __eq__(self, other): ...
    def __repr__(self): ...
    def _repr_png_(self): ...
    @property
    def __array_interface__(self): ...
    def __getstate__(self): ...
    def __setstate__(self, state): ...
    def tobytes(self, encoder_name="raw", *args): ...
    def tobitmap(self, name="image"): ...
    def frombytes(self, data, decoder_name="raw", *args): ...
    def load(self): ...
    def verify(self): ...
    def quantize(self, colors=256, method=None, kmeans=0, palette=None, dither=1): ...
    def copy(self): ...
    __copy__ = copy
    def crop(self, box=None): ...
    def _crop(self, im, box): ...
    def draft(self, mode, size): ...
    def _expand(self, xmargin, ymargin=None): ...
    def filter(self, filter): ...
    def getbands(self): ...
    def getbbox(self): ...
    def getcolors(self, maxcolors=256): ...
    def getdata(self, band=None): ...
    def getextrema(self): ...
    def getexif(self): ...
    def getim(self): ...
    def getpalette(self): ...
    def getpixel(self, xy): ...
    def getprojection(self): ...
    def histogram(self, mask=None, extrema=None): ...
    def entropy(self, mask=None, extrema=None): ...
    def paste(self, im, box=None, mask=None): ...
    def alpha_composite(self, im, dest=(0, 0), source=(0, 0)): ...
    def point(self, lut, mode=None): ...
    def putalpha(self, alpha): ...
    def putdata(self, data, scale=1.0, offset=0.0): ...
    def putpalette(self, data, rawmode="RGB"): ...
    def putpixel(self, xy, value): ...
    def remap_palette(self, dest_map, source_palette=None): ...
    def _get_safe_box(self, size, resample, box): ...
    def reduce(self, factor, box=None): ...
    def save(self, fp, format=None, **params): ...
    def seek(self, frame): ...
    def show(self, title=None, command=None): ...
    def split(self): ...
    def getchannel(self, channel): ...
    def tell(self): ...
    def transpose(self, method): ...
    def effect_spread(self, distance): ...
    def toqimage(self): ...
    def toqpixmap(self): ...

class ImagePointHandler: ...
class ImageTransformHandler: ...

def _wedge() -> Image: ...
def _check_size(size: SizeType) -> bool: ...
def new(mode: str, size: SizeType, color: ColorType = 0) -> Image: ...
def frombytes(
    mode: str, size: SizeType, data: bytes, decoder_name: str = "raw", *args: Any
) -> Image: ...
def frombuffer(
    mode: str, size: SizeType, data: bytes, decoder_name: str = "raw", *args: Any
) -> Image: ...
def fromarray(obj, mode: str | None = None) -> Image: ...

_fromarray_typemap: Dict[Tuple[Tuple, str], Tuple[str, str]] = ...
